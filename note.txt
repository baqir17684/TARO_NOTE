Taro-react笔记
1. 路由跳转Taro.navigateTo
父组件：
import Taro from '@tarojs/taro'
handleNavigate = () => {
  Taro.navigateTo({
    url: '/pages/detail/index?id=123&name=张三'
  })
}
这里传递了两个参数id和name，可以使用模版字符串向url中添加变量

子组件：
import { useRouter } from '@tarojs/taro'
const router = useRouter()；
const { params } = router;
params.id、params.name

注意：通过URL传递的参数，在接收时都会被转换为字符串
如果需要传递复杂的数据结构，可以考虑使用 JSON.stringify() 进行编码，然后在接收页面使用 JSON.parse() 解码
（将js对象转换为JSON字符串）
此外，URL只能使用ASCII字符集的一个子集。很多字符，如空格、引号、括号、百分号、以及非ASCII字符（如中文）等，在URL中都是非法的或有特殊含义的。如果直接使用这些字符，可能会导致URL解析错误或安全问题。
encodeURIComponent() 函数可以将这些特殊字符转换为它们的URL编码形式。
Taro.navigateTo({
  url: `/pages/detail/index?data=${encodeURIComponent(JSON.stringify(complexData))}`
})
对应  const router = useRouter()
  const dataString = router.params.data
  const data = JSON.parse(decodeURIComponent(dataString))

2.Taro.showToast
Taro.showToast 是 Taro 框架提供的一个用于显示消息提示框的 API。这个功能在微信小程序、H5 等多端都有对应的实现。
import Taro from '@tarojs/taro'

Taro.showToast({
  title: '操作成功',
  icon: 'success',
  duration: 2000
})
title（必填）: 提示的内容
icon（选填）: 图标，有效值：'success', 'error', 'loading', 'none'
image（选填）: 自定义图标的本地路径，image 的优先级高于 icon
duration（选填）: 提示的延迟时间，单位毫秒，默认为 1500
mask（选填）: 是否显示透明蒙层，防止触摸穿透，默认为 false
success（选填）: 接口调用成功的回调函数
fail（选填）: 接口调用失败的回调函数
complete（选填）: 接口调用结束的回调函数（调用成功、失败都会执行）


3.动态样式组件
通过className = { judge ? 'class1' : 'class2' }来动态切换样式
这里的judge可以是一个useState的状态值，也可以是一个函数返回的布尔值 
在获取接口数据时根据条件动态设置judge值，从而动态设置样式。

另一种做法是直接 {judge === 1 ? (
  <View className='class1'></View>
) : (
  <View className='class2'></View>
)}

4.Taro典型的路由跳转方式
Taro.navigateTo({
  url: '/pages/detail/index?id=123&name=张三'
})
这个url: /pages/detail/index 是在app.config.js中配置的路由路径
对应pages目录下的detail文件夹下的index文件
而这个index文件是一个页面组件，它的内容是一个React组件，这个组件会被Taro框架渲染到页面上
他可以直接import components from 'components'引入组件，然后在render函数中return这个组件

而天空之城3.0则import { Renderer } from '/sdk';
这是一个动态组件，Renderer 组件接收 functionId 和 routerParams 作为props。
functionId 可能用于确定要渲染的具体组件。（也即是天空之城3.0应用中每个页面的路径名）
routerParams 包含了路由参数，可以传递给被渲染的组件。
Renderer会自动将拖入对应页面的组件渲染到页面上。
同时天空之城3.0应用的app.config.js采用了分包结构提高性能。