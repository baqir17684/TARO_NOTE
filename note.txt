笔记
1. 路由跳转Taro.navigateTo
父组件：
import Taro from '@tarojs/taro'
handleNavigate = () => {
  Taro.navigateTo({
    url: '/pages/detail/index?id=123&name=张三'
  })
}
这里传递了两个参数id和name，可以使用模版字符串向url中添加变量

子组件：
import { useRouter } from '@tarojs/taro'
const router = useRouter()；
const { params } = router;
params.id、params.name

注意：通过URL传递的参数，在接收时都会被转换为字符串
如果需要传递复杂的数据结构，可以考虑使用 JSON.stringify() 进行编码，然后在接收页面使用 JSON.parse() 解码
（将js对象转换为JSON字符串）
此外，URL只能使用ASCII字符集的一个子集。很多字符，如空格、引号、括号、百分号、以及非ASCII字符（如中文）等，在URL中都是非法的或有特殊含义的。如果直接使用这些字符，可能会导致URL解析错误或安全问题。
encodeURIComponent() 函数可以将这些特殊字符转换为它们的URL编码形式。
Taro.navigateTo({
  url: `/pages/detail/index?data=${encodeURIComponent(JSON.stringify(complexData))}`
})
对应  const router = useRouter()
  const dataString = router.params.data
  const data = JSON.parse(decodeURIComponent(dataString))

2.Taro.showToast
Taro.showToast 是 Taro 框架提供的一个用于显示消息提示框的 API。这个功能在微信小程序、H5 等多端都有对应的实现。
import Taro from '@tarojs/taro'

Taro.showToast({
  title: '操作成功',
  icon: 'success',
  duration: 2000
})
title（必填）: 提示的内容
icon（选填）: 图标，有效值：'success', 'error', 'loading', 'none'
image（选填）: 自定义图标的本地路径，image 的优先级高于 icon
duration（选填）: 提示的延迟时间，单位毫秒，默认为 1500
mask（选填）: 是否显示透明蒙层，防止触摸穿透，默认为 false
success（选填）: 接口调用成功的回调函数
fail（选填）: 接口调用失败的回调函数
complete（选填）: 接口调用结束的回调函数（调用成功、失败都会执行）


3.动态样式组件
通过className = { judge ? 'class1' : 'class2' }来动态切换样式
这里的judge可以是一个useState的状态值，也可以是一个函数返回的布尔值 
在获取接口数据时根据条件动态设置judge值，从而动态设置样式。

另一种做法是直接 {judge === 1 ? (
  <View className='class1'></View>
) : (
  <View className='class2'></View>
)}

4.Taro典型的路由跳转方式
Taro.navigateTo({
  url: '/pages/detail/index?id=123&name=张三'
})
这个url: /pages/detail/index 是在app.config.js中配置的路由路径
对应pages目录下的detail文件夹下的index文件
而这个index文件是一个页面组件，它的内容是一个React组件，这个组件会被Taro框架渲染到页面上
他可以直接import components from 'components'引入组件，然后在render函数中return这个组件

而天空之城3.0则import { Renderer } from '/sdk';
这是一个动态组件，Renderer 组件接收 functionId 和 routerParams 作为props。
functionId 可能用于确定要渲染的具体组件。（也即是天空之城3.0应用中每个页面的路径名）
routerParams 包含了路由参数，可以传递给被渲染的组件。
Renderer会自动将拖入对应页面的组件渲染到页面上。
同时天空之城3.0应用的app.config.js采用了分包结构提高性能。

5.外部url直接跳转，使用window.location.href
同时可以用Taro.getEnv()来判断当前环境
根据不同环境使用不同的跳转方式
const env = Taro.getEnv();
if (env === Taro.ENV_TYPE.WEAPP) {
  console.log('小程序环境');
} else if (env === Taro.ENV_TYPE.H5) {
  console.log('H5 环境');
}

5.对于展开按钮周边文字隐形的功能，首先要求背景色透明度是1（rgba最后一项）
如果ui稿里不是1，直接rgba取色一个相近的颜色作为背景色，取色的透明度为1.
透明度不为1的无法实现文字隐形的效果。
然后      .disease_tips_item_content.onlyTwo::after {
        content: '';
        position: absolute;
        right: 0;
        bottom: 0;
        width: 100px;
        height: 40px;
        background: rgba(230, 246, 248, 1);
      }
在展开按钮附近定位一个这样的与背景色相同颜色的空快，遮挡住周边文字，实现文字隐形的效果。

6.游离非游离元素的定位关系
7.border-image和border-radius不兼容

8.intersection observer做懒加载、无限滚动、智能粘性元素
intersection observer主要用来检查目标元素出现在观察区域的情况
并根据情况触发回调函数执行自定义任务。
观察区域root默认值为视口，可通过rootMargin修改观察区域大小
rootMargin 允许您扩展或缩小根元素（通常是视口）的边界。
它的格式类似于 CSS 的 margin："top right bottom left"。
可以使用像素值或百分比。正值会扩大观察区域。负值会缩小观察区域。
例如rootMargin: 0px, 0px, -300px, 0px会将观察区域变为从视口顶端到视口底端往上300px的区域。
threshold是一个数组，包含了一个或多个阈值，用来指定交叉比率。
比如threshold: [0, 0.5, 1]，表示当目标元素的0%，50%、100%进入视口时触发回调函数。
回调函数中的entries是一个IntersectionObserverEntry对象的数组，每个对象对应一个目标元素。
每个IntersectionObserverEntry对象包含了目标元素的一些信息，比如交叉比率、目标元素的边界等。
entries[0].isIntersecting表示目标元素是否与观察区域相交。（是否出现在观察区域内）


9.自定义hook
自定义hook不同于函数，函数获取参数，计算后返回结果。
hook反而是将它的状态量和useEffect注入到使用hook的组件。
hook中的useEffect导致的状态量变化会使得使用该hook的组件重渲染。

10.recharts绘精密图，采用动态方式计算纵坐标刻度。

11. appbar和头图的实现
appbar和头图采用相同的图片。并进行相叠，交互处完全拟合。同时使用一个placeholder占位,通过placeholder的
上边距来控制主内容刚好在appbar和头图下方。
具体的实现：
1.appbar和头图都变为游离，这样他们都从页面顶部往下排列，自然就会重叠。
2.如京东app内的h5页面，采用ssdk配置的navbar时，navbar不是游离的，
而且和头图所在的容器不同级，所以尽管头图为游离，也只能位于navbar下方。
因此，将头图的top: -49px， 49px为navbar的高度。以此来完成重叠。

12.半弹窗的实现，具体见disease-outbreak代码的popview组件。
